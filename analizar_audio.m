##  Funcion que analiza un audio de entrada aplicando un acondicionamiento de la senial ##  y luego calcula las caracteristicas relevantes de la misma (MFCC), para devolverlas##  y utilizarlas en la comparacion con las seniales de referencia.function [mfcc] = analizar_audio(nombre_archivo)  pkg load signal;##---------------------------------------------------------------------------##  ADQUISICION DE LA SENIAL DE VOZ DE ENTRADA##---------------------------------------------------------------------------  % y: es la senial recibida, fm: es la frecuencia de muestreo    [y, fm] = audioread(nombre_archivo);##  [y, fm] = audioread("dataset-ajustes/adelante_2.wav");##  [y2, fm2] = audioread("dataset-ajustes/adelante_2.wav");##  sound(y)  % para escuchar el audio##  sound(y2)##  figure(1)##  plot(y)##  title("Senal 1")##  figure(2)##  plot(y2)##  title("Senal 2")  % Si la senial recibida se encuentra como vector columna, se tranforma a vector fila  if(length(y(1,:)) < length(y(:,1)))    y = y';  endif##---------------------------------------------------------------------------  ## A continuacion, primero se realiza un acondicionamiento de la senial, el cual incluye:  ## -Remocion de la media.  ## -Filtrado para eliminacion de ruido.  ## -Filtrado pre-enfasis.  ## Luego de eso se extraen los coeficientes cepstrales es escala de Mel,  ## para posteriormente comparar con los comandos de voz disponibles en el sistema  ## utilizando la tecnica DTW y verificar cual es el comando de voz mas parecido  ## a la senal de entrada, y si se supera cierto umbral de similitud, se indica  ## cual es el comando a ejecutar.##---------------------------------------------------------------------------##---------------------------------------------------------------------------##  REMOCION DE LA MEDIA (QUITAR COMPONENTE CONTINUA)##---------------------------------------------------------------------------  ## La componente continua es una desviacion general de la senial, positiva o  ## negativa debido principalmente a microfonos de mala calidad o a campos magneticos  ## presentes. Esto afecta de forma critica en etapas posteriores del procesado.  ## La componente continua se elimina restando la media de la senial a cada  ## una de las muestras.  y = y - mean(y);##---------------------------------------------------------------------------##  FILTRADO PARA ELIMINACION DE RUIDO##---------------------------------------------------------------------------  ## Es posible que en la senial se hayan introducido componentes de baja  ## frecuencia procedentes de distintas fuentes. Estas componentes no son de  ## interes para el estudio de la senal de voz y por ello es mejor eliminarlas. La  ## frecuencia de corte se ha establecido en 75 Hz que es la minima a la que se  ## encuentra la frecuencia fundamental (pitch) para la voz masculina  f_min = 75;  f_max = 3000;   % filtrando hasta menos de 3000 la voz en nuestro caso se distorsiona.                  % si la senal tiene fm = 8000 Hz, la f maxima es de 4000, asi                  % que estaria eliminando la parte de 0 a 74 y 3001 a 4000 Hz  printf("Senal original\n");  sound(y);  senal_filtrada = filtrar_senal(y, fm, f_min, f_max);  printf("Senal filtrada \n");  sound(senal_filtrada);##---------------------------------------------------------------------------##  FILTRADO PRE-ENFASIS##---------------------------------------------------------------------------  senal_pre_enfasis = filter([1, -0.97], 1, senal_filtrada);  printf("Senal pre-enfasis \n");  sound(senal_pre_enfasis);##---------------------------------------------------------------------------##  NORMALIZAR SENAL##---------------------------------------------------------------------------  senal_pre_enfasis = 0.5 * senal_pre_enfasis./ max(senal_pre_enfasis);  printf("Senal normalizado \n");  sound(senal_pre_enfasis);  ##---------------------------------------------------------------------------##  VENTANEO##---------------------------------------------------------------------------  ##  La funcion buffer ya hace el paso de ventaneo  ## En intervalos cortos de tiempo la senial se estabiliza y se aproxima a una se?al estacionaria,  ## entonces es necesario dividir utilizando ventanas, donde la mas utilizada es la ventana de Hamming.  ## Cuanto mas rapido se pronuncie, sera necesario un menor tama?o de ventana, pero suelen utilizarse  ## entre 10 y 30 ms.  ## Otro tema es superponer las ventanas (overlap), a mayor velocidad, mayor tiene que ser el overlap.  % Parametros de ventaneo  duracion_ventana = 0.025; % Duracion de cada segmento en segundos  superposicion_ventana = 0.01; % Superposicion entre segmentos en segundos  # Extraer las cantidad de muestras de cada elemento  muestra_ventana = round(duracion_ventana * fm);  muestra_superposicion = round(superposicion_ventana * fm);  % Ventana de Hamming  ventana = hamming(muestra_ventana);  # Extraer cada tramo  tramos = buffer(senal_pre_enfasis, muestra_ventana, muestra_superposicion, 'nodelay');  % Ventaneo  ventaneo = tramos .* ventana;##---------------------------------------------------------------------------##  STFT, TDF DE TIEMPO CORTO##---------------------------------------------------------------------------  stft_senal = abs(fft(ventaneo));##---------------------------------------------------------------------------##  EXTRACCION DE CARACTERISTICAS (Coeficientes cepstrales en escala de Mel)##---------------------------------------------------------------------------  ##  Se ventanea la senial y para cada ventana se aplica:  ## -Transformada de Fourier  ## -Banco de filtros triangulares en escala de Mel  ## -Logaritmo.  ## -Transformada Discreta Coseno.  ## -Coeficientes MFCC      # Definir el numero del filter-bank, por lo general entre 20-40  num_filter = 26;  # Definir cantidad de coeficientes interesados  num_coef = 13;  mfcc = calcularMFCC(stft_senal, fm, muestra_ventana, num_filter, num_coef);  % Guardar MFCC obtenidos para los comandos de referencia##  save data_parar.txt mfcc;endfunction