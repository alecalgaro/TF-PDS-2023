##  Funcion que analiza un audio de entrada aplicando un acondicionamiento de la senial##  y luego calcula caracteristicas relevantes de la misma (MFCC, LPC y energia),##  para devolverlas y utilizarlas en la comparacion con las seniales de referencia.function [caracteristicas] = analizar_audio(nombre_archivo)  pkg load signal;##---------------------------------------------------------------------------##  ADQUISICION DE LA SENIAL DE VOZ DE ENTRADA##---------------------------------------------------------------------------  disp("")  disp("Analizando comando de entrada...")  % y: es la senial recibida, fm: es la frecuencia de muestreo    [y, fm] = audioread(nombre_archivo);##  printf("Senal original\n");##  sound(y, fm);  % Si la senial recibida se encuentra como vector columna, se tranforma a vector fila  if(length(y(1,:)) < length(y(:,1)))    y = y';  endif##---------------------------------------------------------------------------##  AGREGAR RUIDO A LA SENAL CON DISTINTA SNR PARA REALIZAR PRUEBAS##---------------------------------------------------------------------------% [y_con_ruido, py, pr] = generar_ruido(y, SNR)##  [y, py, pr] = generar_ruido(y,0);##---------------------------------------------------------------------------  ## A continuacion, primero se realiza un acondicionamiento de la senial, el cual incluye:  ## -Remocion de la media.  ## -Filtrado para eliminacion de ruido.  ## -Filtrado pre-enfasis.  ## Luego de eso se extraen caracteristicas de la senal (MFCC, LPC y energia),  ## para posteriormente comparar con los comandos de voz disponibles en el sistema  ## utilizando la tecnica DTW y verificar cual es el comando de voz mas parecido  ## a la senal de entrada, y si se supera cierto umbral de similitud, se indica  ## cual es el comando que se deberia ejecutar.##---------------------------------------------------------------------------##---------------------------------------------------------------------------##  REMOCION DE LA MEDIA (QUITAR COMPONENTE CONTINUA)##---------------------------------------------------------------------------  y = y - mean(y);##---------------------------------------------------------------------------##  FILTRADO PARA ELIMINACION DE RUIDO##---------------------------------------------------------------------------  f_min = 75;  f_max = 3000;   % filtrando hasta menos de 3000 la voz en nuestro caso se distorsiona.                  % si la senal tiene fm = 8000 Hz, la f maxima es de 4000, asi                  % que estaria eliminando la parte de 0 a 74 y 3001 a 4000 Hz  senal_filtrada = filtrar_senal(y, fm, f_min, f_max);##  printf("Senal filtrada \n");##  sound(senal_filtrada);##---------------------------------------------------------------------------##  FILTRADO PRE-ENFASIS##---------------------------------------------------------------------------  senal_pre_enfasis = filter([1, -0.97], 1, senal_filtrada);##  printf("Senal pre-enfasis \n");##  sound(senal_pre_enfasis);##---------------------------------------------------------------------------##  NORMALIZAR SENAL##---------------------------------------------------------------------------  senal_pre_enfasis = 0.5 * senal_pre_enfasis./ max(senal_pre_enfasis);##  printf("Senal normalizado \n");##  sound(senal_pre_enfasis);##---------------------------------------------------------------------------##  VENTANEO##---------------------------------------------------------------------------  % Parametros de ventaneo  duracion_ventana = 0.025;       % duracion de cada segmento en segundos  superposicion_ventana = 0.01;   % superposicion entre segmentos en segundos##  duracion_ventana = 0.015;##  superposicion_ventana = 0.005;  % Extraer las cantidad de muestras de cada elemento  muestra_ventana = round(duracion_ventana * fm);  muestra_superposicion = round(superposicion_ventana * fm);  % Ventana de Hamming  ventana = hamming(muestra_ventana);  % Extraer cada tramo (la funcion buffer ya hace el paso de ventaneo)  tramos = buffer(senal_pre_enfasis, muestra_ventana, muestra_superposicion, 'nodelay');  % Ventaneo  ventaneo = tramos .* ventana;##---------------------------------------------------------------------------##  STFT - TDF DE TIEMPO CORTO##---------------------------------------------------------------------------  stft_senal = abs(fft(ventaneo));##---------------------------------------------------------------------------##  EXTRACCION DE COEFICIENTES CEPSTRALES EN ESCALA DE MEL (MFCC)##---------------------------------------------------------------------------  % Definir el numero del banco de filtros, por lo general entre 20-40  num_filter = 26;  % Numero de coeficientes con los que nos queremos quedar  num_coef = 13;  % Llamar a la funcion para calcular los MFCC  mfcc = calcularMFCC(stft_senal, fm, muestra_ventana, num_filter, num_coef);##---------------------------------------------------------------------------##  EXTRACCION DE DELTA MFCC (variacion de velocidad)##---------------------------------------------------------------------------  % Tamano de ventana temporal, defino cuantas muestras de mfcc de tiempo anterior/posterior trabajo.  n = 2;  delta_mfcc = extraer_delta(mfcc, n);  % Si se quiere extraer la aceleracion, se aplica la misma funcion pero con parametro delta_mfcc.## delta2_mfcc = extraer_delta(delta2_mfcc, n);##---------------------------------------------------------------------------##  EXTRACCION DE COEFICIENTES DE PREDICCION LINEAL (LPC)##---------------------------------------------------------------------------  % Extrae los 13 coeficientes de prediccion lineal por columna  n = 12;  lpc_coef = lpc(tramos, n)';   # Salida 67x13, se le aplica la transpuesta##---------------------------------------------------------------------------##  EXTRACCION DE ENERGIA POR VENTANA##---------------------------------------------------------------------------  energia = sum(tramos.*tramos, 1);##---------------------------------------------------------------------------##  CARACTERISTICAS EXTRAIDAS DE LA SENAL - SALIDA DE LA FUNCION##---------------------------------------------------------------------------  caracteristicas = [mfcc; delta_mfcc; lpc_coef; energia];endfunction